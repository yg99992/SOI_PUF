/*
 * soi_puf.c
 *
 *  Created on: 2023Äê10ÔÂ27ÈÕ
 *      Author: Neil
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_types.h"
#include "xil_io.h"
#include "xparameters.h"
#include "xuartps_hw.h"
#include "sd_fun.h"
#include "puf_def.h"
#include "sleep.h"
#include "soi_puf.h"

#define RD_DLY 10

int weak_puf_scan(puf_chaotic* puf_hw, u32* resp_dat_weak4, u32* resp_dat_weak2);
static inline void soi_read_strong_trng_once(puf_chaotic* puf_hw, u16* chal_dat, u8* resp_val, u32* trng0_dat, u32* trng1_dat);
static inline void soi_read_strong_once(puf_chaotic* puf_hw, u16* chal_dat, u8* resp_val);
static inline void soi_read_weak_once(puf_chaotic* puf_hw, u16* chal_dat, u32* weak_puf0_dat, u32* weak_puf1_dat);
static inline void soi_read_trng_once(puf_chaotic* puf_hw, u32* trng0_dat, u32* trng1_dat);
int soi_fast_test();

int soi_test()
{
	u8 inx, name_inx;
	char fpga_id = '4';
	//char file_name[5][20]={"F4P0K4T.bin","F4P0K2T.bin","F4P0ST.bin","F4P0K4W.bin","F4P0K2W.bin"};
	char* file_name[5];
	int crp_num = 100000000;
	int weak_rpt = 1000;
	int strong_rpt = 20;
	puf_chaotic* puf_hw[6];

	puf_hw[0] = (puf_chaotic*)PUF40_BASE_ADDR;
	puf_hw[1] = (puf_chaotic*)PUF41_BASE_ADDR;
	puf_hw[2] = (puf_chaotic*)PUF42_BASE_ADDR;
	puf_hw[3] = (puf_chaotic*)PUF43_BASE_ADDR;
	puf_hw[4] = (puf_chaotic*)PUF44_BASE_ADDR;
	puf_hw[5] = (puf_chaotic*)PUF45_BASE_ADDR;

	file_name[0] = "FXP0K4T.bin";  // store trng in (64,4)-soipuf
	file_name[1] = "FXP0K2T.bin";  // store trng in (64,2)-soipuf
	file_name[2] = "FXP0ST.bin";   // store strong puf response
	file_name[3] = "FXP0K4W.bin";  // store weak response in (64,4)-soipuf
	file_name[4] = "FXP0K2W.bin";  // store weak response in (64,2)-soipuf
	//soi_fast_test();

	for(inx=0; inx<=5; inx++){
		soi_init(puf_hw[inx], CLK5M); //set clk

		for(name_inx=0; name_inx<=4; name_inx++){
			file_name[name_inx][3] = '0'+inx;
			file_name[name_inx][1] = fpga_id;
		}

		strong_puf_read_store(puf_hw[inx], file_name[2], crp_num);
		//weak_puf_read_store(puf_hw[inx], file_name[3], file_name[4], weak_rpt);
	}
	return 0;
}


/************************************************************
 * A fast test function to evaluate the strong PUF,
 * weak PUF and TRNG
 * **********************************************************/
int soi_fast_test()
{
	puf_chaotic* puf_hw = (puf_chaotic*)PUF42_BASE_ADDR;

	u8 strong_resp[100]={0};
	u32 weak4_resp[100][4];
	u32 weak2_resp[100][4];
	u32 trng4_resp[100];
	u32 trng2_resp[100];
	u16 chal_dat[4];
	int i;

	//puf_hw->reg3 = CLK100K;
	soi_init(puf_hw, CLK5M);

	srand(10);
	for(i=0; i<100; i++){
		chal_dat[0] = rand();
		chal_dat[1] = rand();
		chal_dat[2] = rand();
		chal_dat[3] = rand();

		soi_read_strong_once(puf_hw, chal_dat, &strong_resp[i]);
		weak_puf_scan(puf_hw, weak4_resp[i], weak2_resp[i]);
		soi_read_trng_once(puf_hw, &trng4_resp[i], &trng2_resp[i]);

	}

	return 0;
}

int soi_init(puf_chaotic* puf_hw, u16 clk)
{
	puf_hw->reg0 = 0;
	puf_hw->reg1 = 0;
	puf_hw->reg2 = 0;
	puf_hw->reg3 = clk;
	usleep(1000);
	return 0;
}

/***************************************************************
 * Read two TRNG and strong PUF multiple times, and store data into file
 * file_name1: used for storing TRNG data within (64,4)-SOIPUF
 * file_name2: used for storing TRNG data within (64,2)-SOIPUF
 * file_name3: used for storing strong PUF response data (64,2/4)-SOIPUF
 * repeat_num: repeat number
 * *************************************************************/
int soi_strong_trng_read_store(puf_chaotic* puf_hw, char* file_name1, char* file_name2, char* file_name3, int crp_num, int repeat_num)
{

	u32 *trng_dat_block4, *trng_dat_block2;
	u8* resp_dat_block1;
	u32 dat_num;

	u32 i,j;
	u32 *trng_ptr4, *trng_ptr2;
	u8 *resp_ptr1;
	u16 chal_dat[4];

	/************** Allocate memory for storing trng ************/
	dat_num = crp_num * repeat_num; // Each repeat generate 32 bits random data

	// memory for weak 4
	trng_dat_block4 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(trng_dat_block4 == NULL) return -1;
	else memset((void *)trng_dat_block4, 0, sizeof(u32) * dat_num);

	// memory for weak 2
	trng_dat_block2 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(trng_dat_block2 == NULL) return -1;
	else memset((void *)trng_dat_block2, 0, sizeof(u32) * dat_num);


	/************** Allocate memory for storing response ************/
	resp_dat_block1 = (u8 *)malloc(sizeof(u8) * dat_num);
	if(resp_dat_block1 == NULL) return -1;
	else memset((void *)resp_dat_block1, 0, sizeof(u8) * dat_num);

	/************* Init the printer **************/
	resp_ptr1 = resp_dat_block1;  // set the start address of pointer
	trng_ptr4 = trng_dat_block4;  // set the start address of pointer
	trng_ptr2 = trng_dat_block2;  // set the start address of pointer

	for(i=0; i<repeat_num; i++){
		/************* Read responses ****************/
		srand(10);
		for(j=0; j<crp_num; j++){
			chal_dat[0] = rand();
			chal_dat[1] = rand();
			chal_dat[2] = rand();
			chal_dat[3] = rand();

			soi_read_strong_trng_once(puf_hw, chal_dat, resp_ptr1++, trng_ptr4++, trng_ptr2++);
		}

	}

	/************* Store data into SD ************/
	array_store_binfile_char(file_name1,  (u8*)trng_dat_block4,  dat_num*4, 1); //write into bin file
	array_store_binfile_char(file_name2,  (u8*)trng_dat_block2,  dat_num*4, 1); //write into bin file
	array_store_binfile_char(file_name3,  (u8*)resp_dat_block1,  dat_num,   1); //write into bin file

	//array_store_binfile_char(file_name1,  (u8*)trng_dat_block4,  dat_num*4, 4); //write into bin file
	//array_store_binfile_char(file_name2,  (u8*)trng_dat_block2,  dat_num*4, 4); //write into bin file
	//array_store_binfile_char(file_name3,  (u8*)resp_dat_block1,  dat_num,   4); //write into bin file

	free(trng_dat_block4); trng_dat_block4 = NULL;
	free(trng_dat_block2); trng_dat_block2 = NULL;
	free(resp_dat_block1); resp_dat_block1 = NULL;
	return 0;
}

/***************************************************************
 * Read two TRNG blocks multiple times, and store data into file
 * file_name1: used for storing TRNG data within (64,4)-SOIPUF
 * file_name2: used for storing TRNG data within (64,2)-SOIPUF
 * repeat_num: repeat number
 * *************************************************************/
int trng_read_store(puf_chaotic* puf_hw, char* file_name1, char* file_name2, int repeat_num){

	u32 *trng_dat_block4, *trng_dat_block2;
	u32 dat_num;

	u32 j;
	u32 *trng_ptr4, *trng_ptr2;

	/************** Allocate memory for storing response ************/
	dat_num = repeat_num; // Each repeat generate 32 bits random data

	// memory for weak 4
	trng_dat_block4 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(trng_dat_block4 == NULL) return -1;
	else memset((void *)trng_dat_block4, 0, sizeof(u32) * dat_num);

	// memory for weak 2
	trng_dat_block2 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(trng_dat_block2 == NULL) return -1;
	else memset((void *)trng_dat_block2, 0, sizeof(u32) * dat_num);

	trng_ptr4 = trng_dat_block4;  // set the start address of pointer
	trng_ptr2 = trng_dat_block2;  // set the start address of pointer

	for(j=0; j<repeat_num; j++){

		/************** Scan all the weak PUF cells ***************/
		weak_puf_scan(puf_hw, trng_ptr4++, trng_ptr2++);
	}

	array_store_binfile_char(file_name1,  (u8*)trng_dat_block4,  dat_num*4, 1); //write into bin file
	array_store_binfile_char(file_name2,  (u8*)trng_dat_block2,  dat_num*4, 1); //write into bin file

	free(trng_dat_block4); trng_dat_block4 = NULL;
	free(trng_dat_block2); trng_dat_block2 = NULL;
	return 0;
}

/***************************************************************
 * Read two weak PUF blocks multiple times, and store into file
 * file_name1: used for storing weak PUF block within (64,4)-SOIPUF
 * file_name2: used for storing weak PUF block within (64,2)-SOIPUF
 * repeat_num: repeat number
 * *************************************************************/
int weak_puf_read_store(puf_chaotic* puf_hw, char* file_name1, char* file_name2, int repeat_num)
{

	u32 *resp_dat_block4, *resp_dat_block2;
	u32 dat_num;

	u32 j;
	u32 *resp_ptr4, *resp_ptr2;

	/************** Allocate memory for storing response ************/
	dat_num = repeat_num * 4; //Each puf has 4*32 weak bits

	// memory for weak 4
	resp_dat_block4 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(resp_dat_block4 == NULL) return -1;
	else memset((void *)resp_dat_block4, 0, sizeof(u32) * dat_num);

	// memory for weak 2
	resp_dat_block2 = (u32 *)malloc(sizeof(u32) * dat_num);
	if(resp_dat_block2 == NULL) return -1;
	else memset((void *)resp_dat_block2, 0, sizeof(u32) * dat_num);

	resp_ptr4 = resp_dat_block4;  // set the start address of pointer
	resp_ptr2 = resp_dat_block2;  // set the start address of pointer

	for(j=0; j<repeat_num; j++){

		/************** Scan all the weak PUF cells ***************/
		weak_puf_scan(puf_hw, resp_ptr4, resp_ptr2);
		resp_ptr4 += 4;
		resp_ptr2 += 4;
	}

	array_store_file(file_name1,  (unsigned int *)resp_dat_block4,  dat_num, 10, 1); //write and close file
	array_store_file(file_name2,  (unsigned int *)resp_dat_block2,  dat_num, 10, 1); //write and close file

	free(resp_dat_block4); resp_dat_block4 = NULL;
	free(resp_dat_block2); resp_dat_block2 = NULL;
	return 0;
}


/***************************************************************
 * Read two strong PUF and store into file
 * file_name: used for storing PUF response of (64,4/2)-SOIPUF
 * 			  bit0 is the response of (64,4), bit1 -> (64,2)
 * crp_num : CRP number
 * *************************************************************/
int strong_puf_read_store(puf_chaotic* puf_hw, char* file_name, int crp_num){

	u8 *resp_dat_block1;
	u32 dat_num;
	u16 chal_dat[4];

	u32 j;
	u8 *resp_ptr1;


	/************** Allocate memory for storing response ************/
	dat_num = crp_num; //two strong PUF's response are place into 1 u8 data
	resp_dat_block1 = (u8 *)malloc(sizeof(u8) * dat_num);
	if(resp_dat_block1 == NULL) return -1;
	else memset((void *)resp_dat_block1, 0, sizeof(u8) * dat_num);

	/************* Init the printer **************/
	resp_ptr1 = resp_dat_block1;  // set the start address of pointer
	srand(100);
	for(j=0; j<crp_num; j++){
		chal_dat[0] = rand();
		chal_dat[1] = rand();
		chal_dat[2] = rand();
		chal_dat[3] = rand();

		soi_read_strong_once(puf_hw, chal_dat, resp_ptr1++);
	}

	array_store_binfile_char(file_name,  resp_dat_block1,  dat_num, 1); //write into bin file

	free(resp_dat_block1); resp_dat_block1 = NULL;
	return 0;
}

/***************************************************************
 * Read two strong PUF and store both challenge and response into file
 * file_name1: used for storing PUF response of (64,4/2)-SOIPUF
 * 			  bit0 is the response of (64,4), bit1 -> (64,2)
 * file_name2: store PUF challenge
 * crp_num : CRP number
 * *************************************************************/
int strong_puf_read_crp_store(puf_chaotic* puf_hw, char* file_name1, char* file_name2, int crp_num){

	u8 *resp_dat_block1;
	u32 *chal_dat_block1, *chal_ptr1;
	u32 dat_num;

	u32 j;
	u8 *resp_ptr1;


	/************** Allocate memory for storing response ************/
	dat_num = crp_num; //two strong PUF's response are place into 1 u8 data
	resp_dat_block1 = (u8 *)malloc(sizeof(u8) * dat_num);
	if(resp_dat_block1 == NULL) return -1;
	else memset((void *)resp_dat_block1, 0, sizeof(u8) * dat_num);

	chal_dat_block1 = (u32 *)malloc(sizeof(u32) * dat_num * 4);
	if(chal_dat_block1 == NULL) return -1;
	else memset((void *)chal_dat_block1, 0, sizeof(u32) * dat_num * 4);

	/************* Init the printer **************/
	resp_ptr1 = resp_dat_block1;  // set the start address of pointer
	chal_ptr1 = chal_dat_block1;  // set the start address of pointer
	srand(100);
	for(j=0; j<crp_num; j++){
		chal_ptr1[0] = rand();
		chal_ptr1[1] = rand();
		chal_ptr1[2] = rand();
		chal_ptr1[3] = rand();

		soi_read_strong_once(puf_hw, chal_ptr1, resp_ptr1++);
		chal_ptr1+=4;
	}

	array_store_binfile_char(file_name1,  resp_dat_block1,  dat_num, 1); //write into bin file
	array_store_binfile_char(file_name2,  chal_dat_block1,  dat_num*4, 1); //write into bin file

	free(resp_dat_block1); resp_dat_block1 = NULL;
	free(chal_dat_block1); chal_dat_block1 = NULL;
	return 0;
}


/******************************************************
 * Read all the weak PUF response
 * ***************************************************/
int weak_puf_scan(puf_chaotic* puf_hw, u32* resp_dat_weak4, u32* resp_dat_weak2){
	u32 i;
	u8 sft;
	u16 temp;
	u16 chal_dat[4];
	u32 *weak4_ptr, *weak2_ptr;

	for(i=0; i<=3; i++){
		temp = i;
		for(sft=0; sft<8; sft++){
			temp |= (temp << (sft*2));  //temp = 0x0000/0x5555/0xAAAA/0xFFFF
		}

		chal_dat[0] = temp;
		chal_dat[1] = temp;
		chal_dat[2] = temp;
		chal_dat[3] = temp;

		weak4_ptr = resp_dat_weak4 + i;
		weak2_ptr = resp_dat_weak2 + i;

		soi_read_weak_once(puf_hw, chal_dat, weak4_ptr, weak2_ptr);
	}
	return 0;
}


/*******************************************************
 * read strong PUF response and trng data one time
 * output:2-bit resp_val,
 * 		  bit 0 is the response of (64,4)-SOIPUF
 * 		  bit 1 is the response of (64,2)-SOIPUF
 * *****************************************************/
static inline void soi_read_strong_trng_once(puf_chaotic* puf_hw, u16* chal_dat, u8* resp_val, u32* trng0_dat, u32* trng1_dat)
{

	puf_hw->reg0		= (chal_dat[1]<<16) | (chal_dat[0]);
	puf_hw->reg1		= (chal_dat[3]<<16) | (chal_dat[2]);

	puf_hw->reg2		= 1;     // triger puf

	while(puf_hw->reg4 != 1);    // wait finish signal
	//usleep(RD_DLY);

	*resp_val		= (u8)puf_hw->reg2;  		// read response from arbiter
	*trng0_dat		= puf_hw->reg6;  			// read trng from weak PUF0
	*trng1_dat		= puf_hw->reg7;  			// read trng from weak PUF1

	puf_hw->reg2		= 0;	 // reset control
}


/*******************************************************
 * read strong PUF response
 * output:2-bit resp_val,
 * 		  bit 0 is the response of (64,4)-SOIPUF
 * 		  bit 1 is the response of (64,2)-SOIPUF
 * *****************************************************/
static inline void soi_read_strong_once(puf_chaotic* puf_hw, u16* chal_dat, u8* resp_val)
{

	puf_hw->reg0		= (chal_dat[1]<<16) | (chal_dat[0]);
	puf_hw->reg1		= (chal_dat[3]<<16) | (chal_dat[2]);

	puf_hw->reg2		= 1;     // triger puf

	while(puf_hw->reg4 != 1);    // wait finish signal
	//usleep(RD_DLY);

	*resp_val			= (u8)puf_hw->reg2;  	// read response form arbiter

	puf_hw->reg2		= 0;	 // reset control
}


/*******************************************************
 * read two weak PUF block's response
 * output: 32-bit weak_puf0_dat within (64,4)-SOIPUF
 * 		   32-bit weak_puf1_dat within (64,2)-SOIPUF
 * *****************************************************/
static inline void soi_read_weak_once(puf_chaotic* puf_hw, u16* chal_dat, u32* weak_puf0_dat, u32* weak_puf1_dat)
{

	puf_hw->reg0		= (chal_dat[1]<<16) | (chal_dat[0]);
	puf_hw->reg1		= (chal_dat[3]<<16) | (chal_dat[2]);

	puf_hw->reg2		= 1;     // triger puf
	//usleep(RD_DLY);

	while(puf_hw->reg4 != 1);    // wait finish signal

	*weak_puf0_dat		= puf_hw->reg5;  	// read response form weak PUF0
	*weak_puf1_dat		= puf_hw->reg1;  	// read response form weak PUF1

	puf_hw->reg2		= 0;	 // reset control
}


/*******************************************************
 * read trng data
 * output: 32-bit random data within (64,4)-SOIPUF
 * 		   32-bit random data within (64,2)-SOIPUF
 * *****************************************************/
static inline void soi_read_trng_once(puf_chaotic* puf_hw, u32* trng0_dat, u32* trng1_dat)
{

	puf_hw->reg2		= 1;     // triger puf
	//usleep(RD_DLY);

	while(puf_hw->reg4 != 1);    // wait finish signal

	*trng0_dat		= puf_hw->reg6;  	// read response form weak PUF0
	*trng1_dat		= puf_hw->reg7;  	// read response form weak PUF1

	puf_hw->reg2		= 0;	 // reset control
}
